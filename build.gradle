buildscript {
    ext.kotlin_version = "1.3.72"
}

plugins {
    id "idea"
    id "java"
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "org.jetbrains.kotlin.kapt" version "$kotlin_version"
    id "com.adarshr.test-logger" version "2.0.0"
}

group "com.com.totec.trading"
version "0.1"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // api "com.totec.trading:totec-commons:0.1"

    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    api "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.0"
    api "org.eclipse.jetty.websocket:websocket-client:9.4.14.v20181114"
    api "org.apache.httpcomponents:httpasyncclient:4.1.3"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2"
    api "com.google.dagger:dagger:2.27"
    api "org.openjdk.jmh:jmh-core:1.21"
    kapt "org.openjdk.jmh:jmh-generator-annprocess:1.21"
    kapt "com.google.dagger:dagger-compiler:2.27"

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.2"
    testImplementation "io.mockk:mockk:1.9.1"
    testImplementation "io.kotest:kotest-runner-junit5-jvm:4.0.5"
    testImplementation "io.kotest:kotest-assertions-core-jvm:4.0.5"
    testImplementation "io.kotest:kotest-property-jvm:4.0.5"
}
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()
    //dependsOn(gradle.includedBuild("com.totec-commons").task(":test"))
}


jar {
    manifest {
        attributes "Main-Class": "tothrosch.engine.App"
    }

    // This line of code recursively collects and copies all of a project"s files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from {
        configurations.runtimeClasspath.collect {
            exclude ".classpath"
            exclude ".project"
            exclude "META-INF/LICENSE.txt"
            exclude "META-INF/NOTICE.txt"
            exclude "META-INF/LICENSE"
            exclude "META-INF/proguard/coroutines.pro"
            exclude "META-INF/NOTICE"
            exclude "META-INF/DEPENDENCIES"
            exclude "META-INF/ASL2.0"
            exclude "module-info"
            exclude "module-info.class"
            exclude "about.html"
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

/*tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
}*/

/*
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs += [
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi"
        ]
    }
}
*/

